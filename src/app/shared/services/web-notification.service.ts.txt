import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
// import { environment } from '$env';

@Injectable({
  providedIn: 'root',
})
export class WebNotificationsService {
  public permission: Permission;
  constructor() {
    this.permission = this.isSupported() ? 'default' : 'denied';
  }

  /**
   * Check to see if Notification API is supported on the browser
   */
  public isSupported(): boolean {
    return 'Notification' in window;
  }

  /**
   * Request permission to allow web notifications
   */
  public requestPermission(): void {
    if ('Notification' in window) {
      Notification.requestPermission(status => {
        return (this.permission = status);
      });
    }
  }

  /**
   *
   * @param title
   * @param options
   */
  public create(title: string, options?: Models.WebNotification): any {
    return new Observable(obs => {
      if (!('Notification' in window)) {
        console.log('Notifications are not available in this environment');
        obs.complete();
      }
      if (this.permission !== 'granted') {
        console.log(`The user hasn't granted you permission to send push notifications`);
        obs.complete();
      }
      const _notify = new Notification(title, options);
      _notify.onshow = e => {
        return obs.next({
          notification: _notify,
          event: e,
        });
      };
      _notify.onclick = e => {
        return obs.next({
          notification: _notify,
          event: e,
        });
      };
      _notify.onerror = e => {
        return obs.error({
          notification: _notify,
          event: e,
        });
      };
      _notify.onclose = () => {
        return obs.complete();
      };
    });
  }

  /**
   *
   * @param source
   */
  public generateNotification(source: Array<any>): void {
    source.forEach(item => {
      const options = {
        body: item.content,
        /** we want to use the apex log for the icon eventually */
        // icon: '../resource/images/bell-icon.png',
      };
      this.create(item.title, options).subscribe();
    });
  }
}

export declare type Permission = 'denied' | 'granted' | 'default';
